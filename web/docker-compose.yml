services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /etc/nginx/certs:/etc/nginx/certs:ro
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
    restart: unless-stopped

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt
    volumes:
      - /etc/nginx/certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    volumes_from:
      - nginx-proxy:rw
    restart: unless-stopped

  cloudflare-ddns:
    image: favonia/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    network_mode: host
    cap_add:
      - SETUID
      - SETGID
    cap_drop:
      - all
    read_only: true
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - DOMAINS=${DOMAIN}
      - PROXIED=true
      - IP6_PROVIDER=none
    restart: unless-stopped

  searxng:
    image: docker.io/searxng/searxng:latest
    container_name: searxng
    networks:
      - searxng
    ports:
      - "8888:8080"
    volumes:
      - ./searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=${BASE_URL_HTTP}:8888/
      - PUID=1000
      - PGID=1000
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    restart: unless-stopped

  searxng-db:
    image: docker.io/valkey/valkey:7-alpine
    container_name: searxng-db
    command: valkey-server --save 30 1 --loglevel warning
    networks:
      - searxng
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - /mnt/md0/web/searxng:/data
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    restart: unless-stopped

  invidious:
    image: quay.io/invidious/invidious:latest
    container_name: invidious
    ports:
      - "4444:3000"
    environment:
      INVIDIOUS_CONFIG: |
        db:
          dbname: ${INVIDIOUS_DB_NAME}
          user: ${INVIDIOUS_DB_USER}
          password: ${INVIDIOUS_DB_PASSWORD}
          host: invidious-db
          port: 5432
        check_tables: true
        signature_server: inv-sig-helper:12999
        visitor_data: ${INVIDIOUS_VISITOR_DATA}
        po_token: ${INVIDIOUS_PO_TOKEN}
        hmac_key: ${INVIDIOUS_HMAC_KEY}
        default_user_preferences:
          locale: en-US
          region: US
          dark_mode: "dark"
          quality: dash
          quality_dash: 1440p
          volume: 50
    healthcheck:
      test: wget -nv --tries=1 --spider ${BASE_URL_HTTP}:4444/api/v1/comments/jNQXAC9IVRw || exit 1
      interval: 30s
      timeout: 5s
      retries: 2
    depends_on:
      - invidious-db
    restart: unless-stopped

  inv-sig-helper:
    image: quay.io/invidious/inv-sig-helper:latest
    container_name: inv-sig-helper
    command: ["--tcp", "0.0.0.0:12999"]
    environment:
      - RUST_LOG=info
    cap_drop:
      - ALL
    read_only: true
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  invidious-db:
    image: docker.io/library/postgres:14
    container_name: invidious-db
    volumes:
      - /mnt/md0/web/invidious/postgresql:/var/lib/postgresql/data
      - ./invidious/config/sql:/config/sql
      - ./invidious/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh
    environment:
      POSTGRES_DB: ${INVIDIOUS_DB_NAME}
      POSTGRES_USER: ${INVIDIOUS_DB_USER}
      POSTGRES_PASSWORD: ${INVIDIOUS_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    restart: unless-stopped

  www:
    image: nginx:latest
    container_name: www
    expose:
      - 80
    volumes:
      - /mnt/md0/web/www/dist:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - VIRTUAL_HOST=${DOMAIN},www.${DOMAIN}
      - LETSENCRYPT_HOST=${DOMAIN},www.${DOMAIN}
      - LETSENCRYPT_EMAIL=${EMAIL}
    restart: unless-stopped

  wireguard:
    image: ghcr.io/wg-easy/wg-easy
    container_name: wireguard
    environment:
      - LANG=en
      - WG_HOST=vpn.${DOMAIN}
      - PASSWORD_HASH=${WIREGUARD_PASSWORD}
      - UI_TRAFFIC_STATS=true
      - UI_CHART_TYPE=3
    volumes:
      - ./wireguard:/etc/wireguard
    ports:
      - "51820:51820/udp"
      - "51821:51821/tcp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

  webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: webui
    ports:
     - 11435:8080/tcp
    environment:
     - OLLAMA_BASE_URL=${BASE_URL_HTTP}:11434
    volumes:
      - /mnt/md0/web/ollama/webui:/app/backend/data
    depends_on:
     - ollama
    restart: unless-stopped

  ollama:
    image: ollama/ollama
    container_name: ollama
    ports:
     - 11434:11434/tcp
    volumes:
      - /mnt/md0/web/ollama/ollama:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['all']
              capabilities: [gpu]
    restart: unless-stopped

  ntfy:
    image: binwiederhier/ntfy
    container_name: ntfy
    command:
      - serve
    environment:
      NTFY_BASE_URL: "https://ntfy.${DOMAIN}"
      NTFY_CACHE_FILE: /var/lib/ntfy/cache.db
      NTFY_AUTH_FILE: /var/lib/ntfy/auth.db
      NTFY_AUTH_DEFAULT_ACCESS: deny-all
      NTFY_BEHIND_PROXY: true
      NTFY_ATTACHMENT_CACHE_DIR: /var/lib/ntfy/attachments
      NTFY_ENABLE_LOGIN: true
      TZ: ${TIMEZONE}
      VIRTUAL_HOST: "ntfy.${DOMAIN}"
      LETSENCRYPT_HOST: "ntfy.${DOMAIN}"
      LETSENCRYPT_EMAIL: ${EMAIL}
    user: 1000:1000
    volumes:
      - ./ntfy/var/cache:/var/cache/ntfy
      - ./ntfy/etc:/etc/ntfy
      - ./ntfy/var/lib:/var/lib/ntfy
    ports:
      - 3003:80
    restart: unless-stopped

networks:
  searxng:
    ipam:
      driver: default
